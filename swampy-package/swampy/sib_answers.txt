# Text answers from Week 0

# Name: Steve Blank

1) Why would refactoring be useful?
	Refactoring improves the design of software and makes it easier to understand.  By refactoring, a user can cut out a lot of the "noise" and makes the code more readable.  It also helps the user program faster and makes it easier to find bugs.


Explain what each of the following lines does. Use the terminology you learned from the book (or Google)
	
	from TurtleWorld import *
	world = TurtleWorld()
	bob = Turtle()
	wait_for_user()

Answer:

	'from TurtleWorld import *' imports everything from the TurtleWorld module in the swampy package.
	'world = TurtleWorld()' assigns world to the TurtleWorld function.
	'bob = Turtle()' assigns bob to the Turtle function.
	'wait_for_user()' tells TurtleWorld to wait for the user to do something.




These questions pertain to the program you wrote in Week0.

-- What are the arguments of polygon()?  What type is each argument?
Answer: Polyline and angle

-- What two turtle functions did you use to draw the sides of the polygon?
Answer: fd(t, length) and polyline(t,n,l,a)

-- What are the arguments for polyline?  What type is each argument?
Answer: (Turtle, Number, Range, Degrees)





Suppose you wrote a function, center_circle(), that draws a circle of a given radius around the current location of the turtle and restores the turtle to its starting point.

-- What turtle functions would you use to move the turtle from the center to the edge of the circle and get ready to call the original circle() function?
Answer:
pu(bob)
bk(bob, r)
pd(bob)

-- Suppose the interface of this function requires the turtle to end up in the same place it started, facing in the same direction it started.
Answer:
pu(bob)
bk(bob,r)
rt(bob)
pd(bob)

-- What is this type of requirement called?
Answer: Precondition/postcondition